
私が取り組んできたこと

2021年2月

大学に入る前、学校以外で私が取り組んでいた主なことは、文章を書くこととプログラミングだった。エッセイは書かなかった。当時、そして今もおそらく初心者の作家が書くべきとされている短編小説を書いていた。私の小説はひどい出来だった。ほとんど筋がなく、感情の強い登場人物がいるだけで、それが作品に深みを与えているのだと思い込んでいた。

私が初めて書いたプログラムは、当時「データ処理」と呼ばれていた分野で使われていた IBM 1401 というコンピューター上のものだった。これは中学3年のとき、つまり13歳か14歳の頃だ。学区が所有していた1401は、私たちの中学校の地下に設置されており、友人のリッチ・ドレイヴスと私はそれを使う許可を得た。そこはまるでボンド映画に出てくる悪役のアジトのようで、CPU、ディスクドライブ、プリンター、カードリーダーなど、異様な機械が蛍光灯の明かりの下、床が少し高くなった場所に並んでいた。

私たちが使った言語は、初期の Fortran のバージョンだった。プログラムはパンチカードに入力し、カードをカードリーダーに積み上げて、ボタンを押してメモリに読み込んで実行する。普通は、ものすごくうるさいプリンターに何かが印刷される、というのが結果だった。

私は1401に困惑していた。どう使えばいいのか分からなかった。そして今思えば、できることもほとんどなかった。プログラムへの入力はパンチカードに保存されたデータだけで、それを持っていなかった。唯一できそうなのは、円周率の近似値を計算するような、入力を必要としないプログラムだったが、そういう数学的な知識は持っていなかった。だから、当時自分が書いたプログラムを覚えていないのも当然で、たいしたことは何もしていなかったはずだ。一番記憶に残っているのは、プログラムが終了しないことがあると知った瞬間のことだ。タイムシェアリングのないマシンでは、それは技術的なミスであると同時に社会的なミスでもあり、データセンターの管理者の表情がそれを物語っていた。

マイクロコンピューターが登場して、状況は一変した。机の上に置けるコンピューターが登場し、パンチカードを処理して停止するだけではなく、動作中にキーボードの入力に反応するようになったのだ。

私の友人の中で最初にマイクロコンピューターを手に入れたのは、自分でそれを組み立てた人だった。それは Heathkit 社がキットとして販売していたものだ。彼がそのコンピューターの前に座って、プログラムを直接入力しているのを見て、私は非常に感銘を受け、そしてひどくうらやましく感じたことを今でも鮮明に覚えている。

当時、コンピューターは非常に高価だったため、私は何年も父を説得し続けて、ようやく1980年ごろに TRS-80 を買ってもらうことができた。当時の「金字塔」は Apple II だったが、TRS-80 でも十分だった。ここから本格的にプログラミングを始めた。簡単なゲームを書いたり、模型ロケットがどれくらいの高さまで飛ぶかを予測するプログラムを書いたり、父が少なくとも1冊の本を書くのに使ったワープロソフトも作った。メモリには約2ページ分のテキストしか保存できなかったので、2ページずつ書いては印刷していたが、それでもタイプライターよりは遥かに便利だった。

プログラミングは好きだったが、大学ではそれを専攻するつもりはなかった。私は哲学を学ぶつもりだった。それはもっと強力な学問に思えた。高校生の素朴な私は、それを「究極の真理」を学ぶ学問だと思っていて、他の分野で扱う事柄は、単なる「分野ごとの知識」にすぎないと考えていた。だが、実際に大学に入ってみると、他の分野が思想の世界の大部分を占めていて、「究極の真理」なるものに残されている余地はごくわずかしかないことに気づいた。哲学に残っていたのは、他の分野の人々が無視しても構わないと判断した「端の事例（edge cases）」ばかりだった。

18歳の私には、こうした考えを言葉にする力はなかった。ただ、「また哲学の授業を取ったけれど、やっぱりつまらなかった」ということだけはわかっていた。だから、AI（人工知能）に転向することにした。

---

1980年代半ば、AIは世間でも話題になっていたが、私が特にAIに惹かれた理由は2つあった。ひとつは、ハインラインの小説『月は無慈悲な夜の女王』に登場する知性を持つコンピューター「マイク」、もうひとつは、PBSのドキュメンタリー番組でテリー・ウィノグラードが「SHRDLU」というプログラムを使っている様子を見たことだ。この小説を再読したことはないので、今読んでどれほど通用するかはわからないが、当時はその世界に完全に引き込まれた。いずれ「マイク」のようなコンピューターが現れるのは時間の問題だと思ったし、ウィノグラードがSHRDLUを操作しているのを見て、それが数年以内に実現しそうに思えた。必要なのは、SHRDLUにもっと多くの語彙を教えることだけのように思えた。

当時のコーネル大学にはAIの授業はなく、大学院レベルですらなかった。だから私は独学を始めた。そのためには、まずLispを学ばなければならなかった。当時、LispはAIの言語として広く認識されていたからだ。

当時使われていたプログラミング言語はどれも原始的で、それに伴いプログラマーの発想もまた制限されていた。コーネル大学の標準言語はPascalに似た「PL/I」で、他の大学も似たような状況だった。Lispを学んだことで、私の中で「プログラム」の概念は急速に拡張された。その変化はあまりにも劇的だったので、新しい限界がどこにあるのかを感じ取れるようになるまでに何年もかかった。これこそ私が大学に期待していた体験だった。授業の中でではなく、独学という形ではあったが、それでも問題なかった。この数年間、私は自分が進むべき道をはっきりと意識していた。

学部の卒業論文では、SHRDLUをリバースエンジニアリングした。私はこのプログラムを作ることが本当に好きだった。それはコードとしても魅力的だったが、さらに私を夢中にさせたのは、「このプログラムがすでに知性の下層に足をかけ始めている」と信じていたからだった。今となっては信じられない話だが、1985年当時、私だけがそう信じていたわけではなかった。

私は、専攻を選ばなくてよいコーネルの特別プログラムに所属していた。好きな授業を取り、好きなように学位を設定できた。私は当然「人工知能（Artificial Intelligence）」を学位名に選んだ。ところが、実際に卒業証書を受け取ってみると、そこには「"Artificial Intelligence"」と引用符付きで記されていて、まるで皮肉のようだった。当時は少し気になったが、今ではそれが妙に的確に思える。なぜなら、私はまさにその後、皮肉な現実を知ることになるからだ。

---

私は大学院進学にあたり、AIで有名だったMITとイェール、そして友人のリッチ・ドレイヴスが通っていたこともあり、また自作のSHRDLUのクローンで使ったパーサーを発明したビル・ウッズが在籍していたハーバードを受けた。結果的に合格したのはハーバードだけだったので、そこに進学することになった。

はっきりとした瞬間を覚えているわけではないが、大学院に入った最初の年、私は当時主流だったAIがまやかしであることに気づいた。たとえば「犬が椅子に座っている」という文を受け取って、それを形式的な表現に変換し、知識の一覧に加えるようなプログラムがAIとされていたが、それは欺瞞だった。

こうしたプログラムが示していたのは、自然言語の一部が形式言語になり得るということでしかなかった。しかし、それは非常に限られた部分にすぎなかった。自然言語を本当に理解するには、こうしたやり方では到底追いつけないことは明らかだった。SHRDLUに単語を追加すれば済むような問題ではなかった。概念を明示的なデータ構造として表現するというこのAIの手法は、機能しない。むしろ、その壊れたやり方のおかげで、そこに絆創膏を貼るような論文を書く機会は大量に生まれていたが、それで「マイク（知性あるコンピューター）」に到達することは絶対にない。

私は、自分の計画が瓦解する中で何か救えるものはないかと探した。そしてそこにLispがあった。LispはAIとは別に、それ自体として面白いということを、私は体験を通じて知っていた。たとえ当時の人々がLispに興味を持つ主な理由がAIであったとしても、私にとっては別だった。そこで、Lispに焦点を絞ることに決めた。実際、Lispハッキングについての本を書くことにした。当時の自分がLispハッキングについてどれほど無知だったかを思うと、正直ぞっとするが、本を書くというのはそれについて学ぶ最良の方法でもある。『On Lisp』というこの本は1993年に出版されたが、その大部分は大学院時代に執筆したものだった。

---

計算機科学という分野は、理論とシステムという2つの半分から成る、不安定な同盟のようなものだ。理論家は証明を行い、システム系の研究者は何かを構築する。私は「構築する」側に惹かれていた。もちろん理論に対しても大いに敬意を抱いていたし、実際には理論の方がより立派なのではないかという密かな思いもあったが、何かを作るという行為の方がずっと魅力的に感じられた。

だが、システム構築の問題点は、それが長くは残らないことだった。どんなに優れたプログラムでも、数十年もすれば陳腐化してしまう。論文の脚注でその名前が出てくることはあるかもしれないが、実際に使われることはまずない。そして、時代を経たソフトウェアはとてもみすぼらしく見えるものだ。その時代には優れていたとしても、それを理解できるのは分野の歴史に通じた人だけだ。

あるとき、研究室に余っていた Xerox Dandelion（ゼロックスのワークステーション）がいくつか回ってきて、遊びたい人がいれば自由に持っていってよいという話になった。私は少しだけ心が動いたが、当時としてもそれらのマシンは非常に遅く、「これで一体何ができるのか？」という思いが勝ってしまった。他の誰も欲しがらなかったため、それらはそのままどこかへ消えていった。これがシステム構築の運命だった。

私は「何かを作りたい」と願うだけでなく、「長く残るものを作りたい」とも思っていた。

そんな不満を抱えていた1988年、私はカーネギーメロン大学に通っていたリッチ・ドレイヴスを訪ねてピッツバーグへ行った。ある日、子どものころによく通っていたカーネギー研究所を訪れた。そこで一枚の絵を見ていたとき、私はある一見当たり前のようなことに気づいて驚いた。そこに飾られていたのは、「時間に耐えるもの」だった。絵画は陳腐化しない。むしろ、最高の作品は何百年も前に描かれたものだ。

さらに、絵画は生計を立てる手段にもなり得る。もちろんソフトウェアを作るよりはるかに大変だが、それでも真剣に努力し、質素な生活を送れば、なんとか生活できるかもしれない。そして芸術家として生きれば、真に独立した存在になれる。上司もいらなければ、研究資金を獲得する必要もない。

私は昔から絵を見るのが好きだった。では、自分でも描けるのだろうか？ それは全く未知のことだった。絵が人の手によって作られるということは知識としては理解していたが、それはまるで別世界の人々、たとえば遠い昔に生きた人物や、雑誌に取り上げられるような謎めいた天才たちだけが行えることだと思っていた。「自分がアートを作れる」というのは、ほとんど奇跡のように思えた。

その年の秋、私はハーバードで美術の授業を取り始めた。大学院生はどの学部の授業でも受講できたし、私の指導教官トム・チータムはとても寛大だった。私が何か変わった授業を取っていたとしても、それについてとがめられたことは一度もなかった。

こうして私は、「計算機科学の博士課程に在籍しながら、画家を目指し、同時にLispハッキングにも夢中になり、On Lispの執筆にも取り組む」という、多くの大学院生が陥る典型的な「本業以外に精力を注ぎまくる」状態に陥っていた。

---

私は、画家として食べていくには資金が必要だと考え、1989年から1990年にかけて、ボストンのInterleafというソフトウェア会社で働いた。職種はソフトウェアエンジニアだったが、かなり変わった雇われ方だった。私は正式な社員ではなく、インターンのような立場で働いていた。というのも、会社側が私を博士課程の学生として受け入れていたからだ。インターン制度は夏だけだったが、私は秋になっても残り、結局1年半近く働くことになった。

Interleafでの経験は素晴らしかった。私は自分の好きな言語であるLispを使って開発でき、扱っていたのは大規模なデスクトップパブリッシングソフトウェアで、その中には小さなLispインタプリタも組み込まれていた。このプロジェクトに関わる中で、私は大量のLispコードに触れ、それを読むだけでなく、書くことにも慣れていった。

私はこの仕事を通じて、初めてまとまったお金を得ることができた。生活に必要なすべてを自分で賄い、自由な時間も得られるようになった。最終的には、それまでの研究や大学の進路よりも、この自由の感覚こそが、自分の進むべき方向性であると感じるようになった。

この頃、私は大学に戻るかどうかを考えながら、同時に『On Lisp』の執筆を本格的に始めた。Interleafでの勤務中、毎朝仕事の前に早起きして、2時間ほど執筆するのが日課になっていた。この本はLispの高階的な使い方に焦点を当てたもので、マクロや関数型プログラミングのテクニックを解説したものだった。当時はこの分野に関する書籍がほとんどなく、自分がそれを書ける立場にあることに気づいたときは、非常にワクワクした。

Interleafでの勤務を終えた後、私は再び絵の世界に戻ることを決意した。これで最後のチャンスにしようと考え、全力で取り組むために美術の道へと進む。その準備として、1990年秋からRhode Island School of Design（RISD）に通うことにした。

RISDでは、画家として本格的に訓練を受けることができた。そこには、私のように大学を卒業した後に入学した学生も少なくなかった。私は再び一から学び直す気持ちで、デッサンや色彩、構図の技法を身につけていった。

---

RISDを卒業したあと、私はニューヨークに移り住んで、画家としての生活を始めた。1993年から1995年にかけてのことだった。住まいはマンハッタンのイーストビレッジで、スタジオとして使っていたのはブルックリンのグリーンポイントにある元工場の建物だった。これは「スタジオシェア」と呼ばれる形で、ほかのアーティストとスペースを共有していた。

この時期、私は本当に画家として真剣に取り組んでいた。毎日スタジオに通い、絵を描いていた。ギャラリー巡りをしては、自分の作品を見せ、展示のチャンスを探した。何度か小さな展示もできたし、少額ながら作品が売れたこともあった。だが、やはり生活するには足りなかった。

しかも、私は絵に対して「時代遅れな理想」を持っていた。つまり、写真のようにリアルな油絵を描くことこそが偉大な芸術だと思っていたのだ。だが1990年代のアート界では、そうした絵画はあまり評価されていなかった。コンセプチュアルアートやインスタレーションが主流で、私のような「具象画」を描く画家は、商業ギャラリーの外に追いやられていた。

私はだんだんと自分がアート界の「外側」にいることを自覚し始めた。そしてその外側は、まるで密閉された部屋のように孤独だった。

絵を描く時間が減るにつれて、私はまたプログラミングに戻っていった。実際、ニューヨーク時代の私は、On Lisp の校正作業を続けながら、Lispに関するアイデアをノートに書き溜めていた。このノートが、のちに『ANSI Common Lisp』として結実する。

この本を書くことで、私は再び「自分はLispハッカーだ」と実感するようになった。そして、絵の道が経済的にも精神的にも持続困難であると気づいたとき、私はついにアートをあきらめ、再びソフトウェアの世界に戻る決意をした。

とはいえ、私はただの「雇われプログラマ」に戻るつもりはなかった。自分のプロジェクトで何かを作りたかった。そして、運が良ければ、それが「生活の糧」になるかもしれない。私が次に着手したのは、まさにそういうプロジェクトだった。

---

1995年のある日、私はマサチューセッツ州ケンブリッジの自宅で、ニュース記事を読んでいた。Netscapeが株式公開（IPO）を果たし、ウェブの時代が本格的に到来したことを世界が認識し始めた瞬間だった。その記事には、ウェブ上で買い物をする人が増えていること、そして将来は誰もが自分の店を持つようになるだろうという内容が書かれていた。

そのとき、私は「その店を作るソフトを提供するのは誰だろう？」と考えた。さらに、「自分が作れるのでは？」とも思った。

こうして私は、友人のロバート・モリスとともに、ウェブベースのオンラインストア作成ツール「Viaweb」の開発を始めた。これは、ユーザーが自分のウェブブラウザ上でストアを構築できる初のソフトウェアだった。当初は「Webgen」と呼んでいたが、のちにViawebという名前に変えた。

当時、ウェブはまだ遅く、JavaScriptも普及していなかったため、我々はアプリケーションの大部分をサーバー側で動かし、HTMLを使ってインターフェースを組み立てていた。驚かれるかもしれないが、ViawebのサーバーサイドコードはすべてLispで書かれていた。

Lispは商用プロジェクトで使うには奇異に思えるかもしれないが、実際には非常に役立った。なぜなら、我々がやろうとしていたのは、インターフェースを「プログラム的に生成」することだったからだ。テンプレートやデータを組み合わせて動的にHTMLを作る作業は、LispのS式構造と極めて相性が良かった。

製品はうまく動き、徐々に顧客も増えていった。我々は最初、自宅のアパートで作業していたが、やがて投資家がつき、従業員も雇えるようになった。Viawebは、ネット黎明期に生まれた数少ない実用的なウェブアプリケーションの一つだった。

1998年、Yahoo!がViawebを買収した。我々はY Combinator設立より7年前、つまりまだ起業家支援の仕組みが確立されていない時代に、ほとんど偶然のようにして「スタートアップ的成功」を体験することになった。

買収後、私はYahoo!に勤務することになったが、大企業で働くのは向いていないとすぐに感じた。自分の作りたいものを自由に作るために、また新しい道を探す必要があると考えるようになった。

---

Yahoo!で働いていた頃、私はほとんど何も作ることができなかった。これは私にとって非常に苦痛だった。自由にプログラミングできないことはもちろん、興味のある問題に集中することもできなかった。

Viawebを売却して得たお金は、当時の私にとって信じられないほど大きな額だった。そこで私は2000年にYahoo!を辞め、再び「何でもできる時間」を手に入れた。だが、それまでの生活との落差は大きく、最初のうちは何をしてよいのかまったくわからなかった。

私は考えた。何をすべきか？ また何か新しいソフトウェアを作るべきか？ それとも絵を描くべきか？

そんな中で、軽い気持ちで始めたのがエッセイを書くことだった。2001年、私は「ハッカーと画家」というエッセイを書いた。これは私が長年感じていた「プログラマーと芸術家の類似性」についての考察だったが、予想以上に多くの人に読まれた。反響は大きく、私のところには感想メールがたくさん届いた。

それがきっかけとなり、私はエッセイを継続的に書くようになった。最初は主に技術やプログラミング、スタートアップについてだったが、徐々に人生観や社会についても書くようになった。

私は作家ではないと思っていたが、プログラマーが書く文体には独特の明晰さと論理があり、それが読者に受け入れられたのだと思う。私は推敲に時間をかけ、エッセイの構成を練りに練った。そのプロセスは、プログラムを書くことに非常によく似ていた。

この時期、私は「文章を書くこと」それ自体をひとつの創作行為として捉えるようになった。これは、Viawebのようなプロダクトづくりとは異なるが、同じくらい創造的で知的な満足感を得られる営みだった。

---

2004年のある日、私はボストンで行われたスタートアップ関連のイベントに出かけた。そこで、若い起業家志望の人々が熱心に話を聞き、質問をしている姿を見て、ふと思った。「彼らの多くは、私が90年代後半に体験したようなことをやりたいのだ」と。

そして私は思った。「ならば、そのやり方を教えればいいのでは？」

こうして2005年、私はロバート・モリス、トレヴァー・ブラックウェル、ジェシカ・リヴィングストンとともに、Y Combinator を設立した。最初は実験だった。資金もごくわずかだったし、我々自身もどうなるかまったくわかっていなかった。

最初の「バッチ」には、8つのチームが参加した。その中の1つが、のちにRedditとなるプロジェクトだった。

当時、起業家への支援といえば、VC（ベンチャーキャピタル）やエンジェル投資家しか存在しなかった。彼らは基本的にビジネスプランや市場調査にしか関心がなく、ハッカーが少人数で作る製品には見向きもしなかった。我々はそこにこそチャンスがあると考えた。**「ハッカーがプロダクトを作ること」**を支援するプログラム。それがY Combinatorの核だった。

我々のやり方はシンプルだった。ごく少額の資金を出し、3ヶ月間でプロトタイプを作らせる。週に1度集まり、ディナーを食べながら議論を交わす。そして、最後に「Demo Day」と呼ばれる投資家向けの発表会を開く。

このモデルは成功した。初期の卒業生の中には、後に大きな企業へと成長したスタートアップがいくつもあった。そして何より、ハッカーが起業するという選択肢が、ようやく現実のものとして受け入れられるようになった。

私はY Combinatorで、Viawebのときよりもはるかに多くのことを学んだ。単にスタートアップの作り方だけでなく、人が持つポテンシャル、チームのダイナミクス、社会の変化の兆しなど、あらゆる「動き」の初期段階を観察できる立場にいたのだ。

---

Y Combinator の活動が軌道に乗るにつれて、私はさらに多くのエッセイを書くようになった。内容も多岐にわたり、技術、スタートアップ、教育、都市、さらには富と格差まで、さまざまなテーマを取り上げた。

これらのエッセイは、当初は単なる個人的な発信にすぎなかったが、徐々に多くの人々に読まれるようになり、私の考え方がスタートアップ界に少なからぬ影響を与えるようになっていた。私が書いた「スタートアップのアイデアは、最初はダサく見えるものだ」や、「成長こそが最重要の指標である」といった主張は、多くの創業者に引用されるようになった。

ある種、私は「スタートアップの思想家」あるいは「哲学者」のような立場になっていた。かつて大学で哲学を学ぼうとした頃には想像もしなかった形で、私は思索する人間としての活動に戻っていた。

講演の機会も増えた。学生、エンジニア、創業者に向けて話す場が多くなり、そのなかで多くの才能ある若者たちと出会った。彼らの中には、後に非常に大きな企業を築く者もいた。

Y Combinator では、資金調達のあり方にも変化が起こっていた。従来は、投資家が起業家を「選ぶ」形だったが、YCを経た創業者たちは、逆に投資家を選べる立場になっていった。スタートアップという仕組みの中で、「創る人」が主導権を握れるようになったのだ。

これは大きな転換だった。そして私は、それを可能にする一助となれたことに深い喜びを感じていた。

だがその一方で、私は自分の中にある「作りたい欲求」が、少しずつ満たされないまま残っていることにも気づいていた。

---

私は再び「何かを作りたい」という欲求に駆られていた。それも、他人のためにではなく、自分自身のために。そうした中で自然に戻ってきたのが、プログラミング言語への関心だった。

私がLispに初めて出会ったのは1980年代だったが、あのとき感じた「世界が一気に広がる」感覚は今でも忘れられない。そして今、自分自身の言語を作りたいという気持ちが強くなっていた。Y Combinatorでの経験を通じて、私は多くのスタートアップがソフトウェアや言語選びで苦しむ様子を見てきた。だからこそ、より根源的で、シンプルかつ表現力に富んだ言語を自分で作りたいと思ったのだ。

こうして私は「Bel（ベル）」という言語の構想を始めた。Belは、Lispの精神を受け継ぎつつ、よりモダンな考え方を取り入れた、新しい実験的言語だ。最大の特徴は、実行時にプログラム自身を自在に操作できる柔軟性であり、それにより、開発者が言語そのものを拡張・再定義できるように設計していた。

この言語を作ることは、私にとって極めて個人的なプロジェクトだった。私は日々ノートにアイデアを書き留め、仕様を練り、試作を繰り返した。これは、スタートアップを立ち上げたり、投資したりするのとはまったく異なる種類の満足感をもたらした。Belの開発には明確な締切も収益モデルも存在しない。ただ、「こうありたい」と思うものを、自分の手でかたちにしていく作業だけがあった。

この作業を通じて、私は改めて「ハッカーであるとはどういうことか」を再認識した。誰にも命じられることなく、自ら課題を見出し、それを解決するためにコードを書く――この行為こそが、自分にとって最も自然で、最も自由な時間の使い方だったのだ。

---

私は、Bel のようなプロジェクトに時間を費やすことが、自分にとって最も充実した人生の送り方なのだと気づいた。

現在、私はカリフォルニアの郊外に住み、家族と過ごしながら、日々の多くの時間を自分の考えを掘り下げることに使っている。ときにはエッセイを書き、ときにはコードを書き、またときには子どもたちと過ごしながら、アイデアが自然と浮かんでくるのを待つ。

人はよく、「あなたは今何をしているのですか？」と私に尋ねる。私はこう答えるようにしている。

「私は、考えて、書いて、作っている。」

これが私にとっての「仕事」であり、私の人生を通して一貫して続いてきた活動でもある。

私は若い頃、何かを「仕事」として定義することに戸惑っていた。たとえば、コンピューターに触れて遊んでいる時間が「仕事」と言えるのか？　文章を書くことはどうか？　だが、今ならはっきりと言える。創造的な行為に集中している時間こそが、私にとっての本当の仕事だったのだと。

それは誰かに雇われた仕事でも、収入を生むことが前提の営みでもなかった。ただ、自分が「価値がある」と思うことに、自分のエネルギーを注ぎ込む時間。それこそが、私が人生で最も大切にしてきたことなのだ。

もし若い頃の自分に一つだけ助言できるなら、こう言うだろう。

「心が自然に向かうことを信じて、やり続けなさい」

結局のところ、それが一番確かな道だったのだから。

---

ここまでの人生を振り返ってみて、私が一貫してやってきたことは、考えること、書くこと、作ることだった。

私は、小説を書こうとして失敗し、プログラムを書き始めた。最初のうちは意味も分からず1401に向かっていたが、やがてTRS-80に出会い、実際に自分で動くものを作るようになった。

その後、AIに夢中になり、SHRDLUを再現しようとし、Lispと出会った。大学院でAIの限界を知り、Lispに専念しようと決め、最初の本を書いた。絵画に転向しようとして、RISDへ通い、ニューヨークで画家として活動したが、そこでもやはり「作ること」が中心だった。

その後、Viawebというウェブアプリケーションを作り、それがYahoo!に買収されたことで、自由な時間を手に入れた。その時間を使って、またエッセイを書き、Y Combinatorを創設し、たくさんの起業家と出会い、彼らを助ける活動をした。

そして今、再び原点に立ち返って、言語を作っている。私は何十年も前と同じように、ノートにメモを書き、端末の前でコードを書いている。

こうしてみると、私の人生は非常に一貫していたと言える。私はずっと、「アイデアを探し、それを形にすること」に取り組んできたのだ。
時にはコードという形で、時には文章で、あるいは絵画や言語という手段で。

私が人生でしてきたすべてのことは、それぞれ異なる分野のように見えて、実のところはすべて同じ本質を持っていた。

それは、「心の中にあるイメージを、外の世界に定着させる」という営みだった。

そして、おそらくこれからも、私はそれを続けていくのだと思う。

---

注釈

[1]
私の経験は、コンピューターの進化の中で「タイムシェアリング機＋インタラクティブOS」という段階を飛ばしている。私はバッチ処理からマイクロコンピューターへと一気に進んだため、マイクロコンピューターがますます刺激的に感じられたのだった。

[2]
イタリア語の抽象的な概念に対応する単語は、英語の同根語からほぼ予測できる（ただし "polluzione" のような例外的な罠もある）。問題なのは日常語のほうである。したがって、たくさんの抽象概念をいくつかのシンプルな動詞と一緒に並べれば、少ないイタリア語の語彙でもかなりの表現が可能になる。

[3]
私はフィレンツェの「ピアッツァ・サン・フェリーチェ4番地」に住んでいて、アカデミア美術学校までは旧市街の背骨のようなルートを通って通っていた。ピッティ宮を過ぎ、橋を渡り、オルサンミケーレを抜け、大聖堂と洗礼堂の間を通り、ヴィア・リカソリを北へ進んでサン・マルコ広場へ。冬の暗く静かな夜から、真夏の観光客でごった返す日中まで、あらゆる時間帯の街並みを歩いた。

[4]
人物画であっても、静物画のように描くことは可能だ。モデルが協力的であれば、それは静物画の最高峰とも言える。もっとも、長時間のポーズはしばしば苦痛に満ちた表情をモデルに与えてしまう。

[5]
Interleafは、頭の良い人材と優れた技術を持っていた企業のひとつだったが、ムーアの法則によって押しつぶされた。1990年代、汎用のIntel製プロセッサの性能が指数関数的に向上したため、専用高性能ハードとそれに対応したソフトウェアを提供していた企業は、ブルドーザーのように一掃されていった。

[6]
RISDの学生たちが「シグネチャースタイル（独自の画風）」を求めていたのは、必ずしも金銭目的ではなかった。アートの世界では、「お金」と「クールさ」が強く結びついている。高額なものはクールに見え、クールなものはやがて高額になる。

[7]
技術的には、そのアパートは「家賃統制（rent-controlled）」ではなく「家賃安定（rent-stabilized）」だったが、それはニューヨーカーにしか意味がない区別だ。要するに、本当に安かったのだ。市場価格の半分以下だった。

[8]
ほとんどのソフトウェアは完成したらすぐに公開できる。だが、オンラインストア構築ツールのようなソフトは、ストアをホスティングしている以上、ユーザーがいない状態が一目でバレてしまう。だから、我々は「非公開ベータ」という形で最初のユーザーを募り、見栄えの良いストアが揃ってから初めて正式公開した。

[9]
Viawebには、ユーザーがページのスタイルを自分で定義できるコードエディタがあった。ユーザー自身は気づいていなかったが、実際にはLisp式を編集していたのだ。ただし、これは「アプリエディタ」ではなかった。なぜなら、コードが実行されるのは、買い物客が訪れたときではなく、ストアが生成されるときだったからだ。

[10]
これは現在ではよくある経験の最初の例だった。つまり、何かを書くと、それに対する怒りのコメントが殺到するというものだ。Lispが他の言語より優れているなんて、どうしてそんなことが言えるんだ？ すべての言語はチューリング完全じゃないか？──そんな反応ばかりだった。私が書いたエッセイのコメント欄を見た人が「お気の毒です」と言ってくることがあるが、私は「最初からずっとこうでした」と答える。それは誇張ではない。これはこの世界の仕様なのだ。エッセイは読者がまだ知らないことを伝えるものであり、そういうことを言われるのが嫌な人も必ずいる。

[11]
1990年代にも人々はネットに様々なものを投稿していたが、それは「オンラインに置いた」だけであり、「オンラインで出版した」とは違う。「出版する」とは、そのオンライン版を主要な、あるいは唯一のバージョンとして扱うことを意味する。

[12]
このことから得られる一般的な教訓がある。それはYCでの経験からも明らかだ──一度作られた慣習は、それを生んだ制約が消えてもなお、人々を縛り続ける。かつてのVCの慣行は、現実の制約に根ざしていた。スタートアップはかつては非常にコストがかかり、稀少な存在だった。今では安く、一般的になったが、それでもVCの慣行は古い世界観を反映し続けている。エッセイ執筆に関する慣習がいまだに印刷時代の制約を引きずっているのと同じだ。

つまり、独立心の強い人──すなわち慣習の影響を受けにくい人──は、急速な変化にさらされている分野（そこでは慣習が時代遅れである可能性が高い）において、優位に立てるということでもある。

興味深いのは、「どの分野が急速に変化するかは、必ずしも予測できない」という点だ。ソフトウェアやベンチャーキャピタルがそうなるのは当然としても、誰が「エッセイの書き方」が変化すると予想できただろうか？

[13]
我々はシリコンバレーで舐められていたので、ラムダ計算の中でも最もクールなトリックのひとつ、「Yコンビネータ」にちなんで社名を変更した。

私がオレンジ色を選んだのは、最も暖かい色だからというのもあるし、当時どのベンチャーキャピタル（VC）も使っていなかったからだ。2005年当時のVCは、どれも地味な色──エンジ、ネイビーブルー、フォレストグリーンなど──を使っていて、それは起業家ではなく出資者（LP）への印象を意識していたからだった。YCのロゴ自体が内輪ネタで、Viawebのロゴが赤い円に白いVだったので、それをもじってオレンジ色の四角に白いYにした。

[14]
2009年から数年間、YCは実際にファンドとして運営された。というのも、規模が大きくなりすぎて、私個人では資金をまかないきれなくなったからだ。しかしHerokuが買収されたあと、再び自己資金で運営できるようになった。

[15]
私は「ディールフロー（deal flow）」という言葉が昔から好きではない。なぜなら、これはある時点でのスタートアップの数が一定であることを前提としているからだ。それは事実に反するだけでなく、YCの存在意義はむしろそれを打ち破ることにある。つまり、本来存在しなかったであろうスタートアップがYCによって生まれるのだ。

[16]
彼女（Jessica Livingston）は、当時買い集めたエアコンがすべて形もサイズもバラバラだったと報告している。というのも、品薄状態で手に入るものをかき集めたためだ。ただしどれも、今の彼女では持てないほど重かったらしい。

[17]
HN（Hacker News）運営には、非常に奇妙な「エッジケース」があった。それは「エッセイを書く人間が同時にフォーラムを運営している場合」である。フォーラムの運営者というのは、少なくとも自分に言及された投稿は読んでいると見なされる。そしてエッセイを書くと、フォーラムにはその内容に関する想像力豊かな誤読が投稿される。個別には我慢できるが、両者が合わさると破滅的になる。なぜなら、誤読に反論しないと、「読んでいるはずなのに黙っている＝事実として認めた」と解釈されるからだ。こうして、ますます誤読が加速する。「今なら本人に喧嘩を売れる」と思わせてしまう。

[18]
YCを離れて最もつらかったのは、Jessicaと一緒に仕事をしなくなったことだった。我々は出会って以来ずっとYCを一緒にやってきて、それを私生活と切り離そうとも思わなかった。だから、YCを離れることは、深く根を張った木を引き抜くような感覚だった。

[19]
「発明されたもの」と「発見されたもの」をより明確に区別するには、「宇宙人」を使うとよい。たとえば、ピタゴラスの定理は、どんな高度な宇宙文明でも必ず知っているはずだ。私は確信はやや弱まるが、McCarthy が1960年の論文で定義した Lisp も、おそらく知られているだろうと思っている。

ただし、それが宇宙人の知っている「唯一の言語」だとは限らない。彼らも数値やエラー処理、入出力を必要とするはずだ。したがって、おそらく「発見性（discoveredness）」を保ったまま McCarthy の Lisp から発展する道が、少なくとも1つは存在すると思われる。

---

謝辞（Thanks）

Trevor Blackwell、John Collison、Patrick Collison、Daniel Gackle、Ralph Hazell、Jessica Livingston、Robert Morris、Harj Taggar 各氏に、草稿のレビューについて感謝する。